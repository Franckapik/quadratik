<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <title>Boutique Quadratik.fr</title>
  <link rel='stylesheet' href='/stylesheets/style.css' />
  <link href="https://use.fontawesome.com/releases/v5.0.6/css/all.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/vue"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/zooming/1.2.7/zooming.js"></script>
  <script src="https://js.braintreegateway.com/web/dropin/1.10.0/js/dropin.min.js"></script>
  <script src="http://code.jquery.com/jquery-3.2.1.min.js" crossorigin="anonymous"></script>

</head>

<body id="body_shop">
  <% include header.ejs %>
    <div class="shop_container">
      <div id="app">
        <% include include_shop/articles.ejs %>
          <% include include_shop/cartBox.ejs %>
            <div class="commande_process">
              <div class="w3-light-grey" v-show="progressionBar">
                <div id="myBar" class="w3-green"></div>
              </div>
              <% include include_shop/enregistrement.ejs %>
                <% include include_shop/livraison.ejs %>
                  <% include include_shop/paiement.ejs %>
            </div>
            <% include include_shop/askLogin.ejs %>
              <% include include_shop/cart_large.ejs %>

      </div>

    </div>


    <script>
      var shop = <%-JSON.stringify(products)%>;

      //Tri des éléments


      var collections = new Map();

      shop.forEach(product => {
        //Get the array associated with this collection id
        var currentCollection = collections.get(product.collectionId);

        //If there is no array for this value yet, create it.
        if (currentCollection == null) {
          currentCollection = [];
          collections.set(product.collectionId, currentCollection);
        }

        //Place the current product into the array
        currentCollection.push(product);
      })

      //The map will now contain an array for each collectionid, which again contains an array with its items
      var collectionsArray = [];
      collections.forEach((products, collectionid, map) => {
        collectionsArray.push(products);
      })

      const vm = new Vue({
        el: "#app",
        data: {
          items: [],
          shop: shop,
          details: false,
          collections: collectionsArray,
          showCart: false,
          cart_large: false,
          enregistrement: false,
          livraison: false,
          livraison_newAdress: false,
          livraison_relais: false,
          livraison_domicile: false,
          paiement: false,
          cheque: false,
          boutique: true,
          createPwd: false,
          success: false,
          askLogin: false,
          progressionBar: false,
          cart_box: true,
          errors: [],
          nom: '',
          prenom: '',
          adresse: '',
          ville: '',
          codepostal: '',
          telephone: '',
          mail: '',
          utilisation: '',
          livr_choice: '',
          livr_nom: '',
          livr_adresse: '',
          livr_ville: '',
          livr_postal: '',
          totalProduits: '',
          totalFdp: '',
          amount: '',


        },

        created: function() {

          this.updateCart();
        },

        computed: {
          total() {
            var total = 0;
            for (var i = 0; i < this.items.length; i++) {
              total += this.items[i].price * this.items[i].qty;
            }

            return total;
          },
          articlesQty() {
            var articlesQty = 0;
            for (var i = 0; i < this.items.length; i++) {
              articlesQty += this.items[i].qty;

            }

            return articlesQty;
          },
        },

        methods: {

          deliveryForm: function(e) {


            if (vm.livr_choice === 'autreAdresse') {

              e.preventDefault();
              this.errors = [];
              if (this.livr_nom === '') {
                this.errors.push("Veuillez completer votre nom");

              } else if (this.livr_adresse === '') {
                this.errors.push("Veuillez completer votre adresse");

              } else if (this.livr_ville === '') {
                this.errors.push("Veuillez completer votre ville");

              } else if (this.livr_postal === '') {
                this.errors.push("Veuillez completer votre code postal");

              } else if (!this.validPostal(this.livr_postal)) {
                this.errors.push("Votre code postal entré est non valide!");

              } else {
                fetch('dbcreate/livraison', {
                    credentials: 'include',
                    method: 'post',
                    headers: new Headers({
                      'Content-Type': 'application/json'
                    }),
                    body: JSON.stringify({
                      livr_choice: this.livr_choice,
                      livr_nom: this.livr_nom,
                      livr_adresse: this.livr_adresse,
                      livr_ville: this.livr_ville,
                      livr_postal: this.livr_postal
                    })
                  })
                  .then(res => res.json())
                  .then(res => {
                    if (res.error) {
                      this.errors.push(res.error);
                    } else {
                      console.log(res.success);
                      // redirect to a new URL, or do something on success
                      this.paiement = true;
                      this.livraison = false;


                    }
                  });
              }
            }

            if (vm.livr_choice === 'domicile') {
              e.preventDefault();
              this.errors = [];

              console.log(vm.livr_choice);
              fetch('dbcreate/livraison', {
                  credentials: 'include',
                  method: 'post',
                  headers: new Headers({
                    'Content-Type': 'application/json'
                  }),
                  body: JSON.stringify({
                    livr_choice: this.livr_choice

                  })
                })
                .then(res => res.json())
                .then(res => {
                  if (res.error) {
                    this.errors.push(res.error);
                  } else {
                    console.log(res.success);
                    // redirect to a new URL, or do something on success
                    this.paiement = true;
                    this.livraison = false;

                  }
                });
            }
          },

          cartForm: function(e) {
            e.preventDefault();
            this.errors = [];
            fetch('dbcreate/cartToDB', {
                credentials: 'include',
                method: 'post',
                headers: new Headers({
                  'Content-Type': 'application/json'
                })
              })
              .then(res => res.json())
              .then(res => {
                if (res.error) {
                  this.errors.push(res.error);
                } else {
                  console.log(res.success);
                  // redirect to a new URL, or do something on success
                  this.enregistrement = true;
                  this.cart_large = false;
                  this.cart_box = false;
                  this.progressionBar = true;

                }
              });


          },

          userForm: function(e) {
            e.preventDefault();
            this.errors = [];
            if (this.nom === '') {
              this.errors.push("Veuillez completer votre nom");

            } else if (this.prenom === '') {
              this.errors.push("Veuillez completer votre prénom");

            } else if (this.adresse === '') {
              this.errors.push("Veuillez completer votre adresse");

            } else if (this.ville === '') {
              this.errors.push("Veuillez completer votre ville");

            } else if (this.codepostal === '') {
              this.errors.push("Veuillez completer votre code postal");


            } else if (!this.validPostal(this.codepostal)) {
              this.errors.push("Votre code postal entré est non valide!");

            } else if (this.telephone === '') {
              this.errors.push("Veuillez completer votre numéro de téléphone");

            } else if (!this.validPhone(this.telephone)) {
              this.errors.push("Votre numéro de téléphone entré est non valide!");

            } else if (this.mail === '') {
              this.errors.push("Veuillez completer votre mail");


            } else if (!this.validEmail(this.mail)) {
              this.errors.push("Votre adresse mail entrée est non valide!");
            } else {
              fetch('dbcreate/user', {
                  credentials: 'include',
                  method: 'post',
                  body: JSON.stringify({
                    form_nom: this.nom,
                    form_prenom: this.prenom,
                    form_adresse: this.adresse,
                    form_ville: this.ville,
                    form_codepostal: this.codepostal,
                    form_telephone: this.telephone,
                    form_mail: this.mail,
                    form_utilisation: this.utilisation
                  }),
                  headers: new Headers({
                    'Content-Type': 'application/json'
                  })
                })
                .then(res => res.json())
                .then(res => {
                  if (res.error) {
                    this.errors.push(res.error);
                  } else {
                    console.log(res.success);
                    // redirect to a new URL, or do something on success
                    vm.enregistrement = false;
                    vm.livraison = true;
                  }
                });
            }
          },
          validEmail: function(email) {
            var regex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            return regex.test(email);
          },
          validPhone: function(phone) {
            var regex = /^(0|\+33)[1-9]([-. ]?[0-9]{2}){4}$/;
            return regex.test(phone);
          },
          validPostal: function(postal) {
            var regex = /^[0-9]{5,5}$/;
            return regex.test(postal);
          },

          moveBar(value) {

            var elem = document.getElementById("myBar");
            var width = value;

            elem.style.width = width + '%';
            console.log(elem.style.width);
          },

          addToCart(item) {
            fetch('/cart', {
                credentials: 'include',
                method: 'post',
                body: JSON.stringify({
                  item_name: item.nom,
                  item_price: item.prix,
                  item_packaging: item.packaging

                }),
                headers: new Headers({
                  'Content-Type': 'application/json'
                })
              }).then(res => res.json())
              .catch(error => console.error('Error:', error))
              .then(response => console.log('POST Success:', response.add));
            this.updateCart();
          },
          removeFromCart(item) {
            fetch('/cart/' + item.name, {
                credentials: 'include',
                method: 'delete'
              }).then(res => res.json())
              .catch(error => console.error('Error:', error))
              .then(response => console.log('DELETE Success:', response.cart));
            this.updateCart();
          },
          updateCart() {
            fetch('/cart', {
                credentials: 'include',
                method: 'get',
                headers: new Headers({
                  'Content-Type': 'application/json'
                })
              }).then(res => res.json())
              .catch(error => console.error('Error:', error))
              .then(
                function(response) {
                  vm.items = response.cart;
                  vm.totalProduits = response.total_produits;
                  vm.totalFdp = response.total_FraisDePorts;
                  vm.amount = response.amount;

                });
          },
          emptyCart() {
            fetch('/cart', {
              credentials: 'include',
              method: 'put'
            });

            this.updateCart();
          }
        }
      });
    </script>

    <% include footer.ejs %>

      <script src="/js/braintreeClient.js"></script>
</body>

</html>
