<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <title>Boutique Quadratik.fr</title>
  <link rel='stylesheet' href='/stylesheets/build/style.min.css'  />
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.11/css/all.css" integrity="sha384-p2jx59pefphTFIpeqCcISO9MdVfIm4pNnsL08A6v5vaQc4owkQqxMV8kg4Yvhaw/" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/vue"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/zooming/1.2.7/zooming.js"></script>
  <script src="http://code.jquery.com/jquery-3.2.1.min.js" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.js" crossorigin="anonymous"></script>

</head>

<body id="body_shop">
    <% include include_index/hamburger.ejs %>
  <% include header.ejs %>
    <div class="shop_container">
      <div id="app">


        <% include include_shop/articles.ejs %>
          <% include include_shop/cartBox.ejs %>
              <% include include_shop/cart_large.ejs %>
                <% include include_shop/load_more.ejs %>
      </div>

    </div>


    <script>
      var shop = <%-JSON.stringify(products)%>;
      //Tri des éléments
      var collections = new Map();

      shop.forEach(product => {
        //Get the array associated with this collection id
        var currentCollection = collections.get(product.collectionId);

        //If there is no array for this value yet, create it.
        if (currentCollection == null) {
          currentCollection = [];
          collections.set(product.collectionId, currentCollection);
        }

        //Place the current product into the array
        currentCollection.push(product);
      })

      //The map will now contain an array for each collectionid, which again contains an array with its items
      var collectionsArray = [];
      collections.forEach((products, collectionid, map) => {
        collectionsArray.push(products);
      })

      const vm = new Vue({
        el: "#app",
        data: {
          items: [],
          detailsItem: [],
          shop: shop,
          details: false,
          collections: collectionsArray,
          cart_box: true,
          errors: [],
          totalProduits: '',
          totalFdp: '',
          amount: '',
          promo: '',
          reduction: ''


        },

        created: function() {
          this.updateCart();
        },

        computed: {
          total() {
            var total = 0;
            for (var i = 0; i < this.items.length; i++) {
              total += this.items[i].price * this.items[i].qty;
            }

            return total;
          },
          articlesQty() {
            var articlesQty = 0;
            for (var i = 0; i < this.items.length; i++) {
              articlesQty += this.items[i].qty;

            }

            return articlesQty;
          },
        },

        methods: {

          addToCart(item) {

            fetch('/cart/add', {
                credentials: 'include',
                method: 'post',
                body: JSON.stringify({
                  item_name: item.nom,
                  item_price: item.prix,
                  item_packaging: item.packaging

                }),
                headers: new Headers({
                  'Content-Type': 'application/json'
                })
              }).then(res => res.json())
              .catch(error => console.error('Error:', error))
              .then(response => {

                this.updateCart();
              });

          },
          removeFromCart(item) {
            fetch('/cart/' + item.name, {
                credentials: 'include',
                method: 'delete'
              }).then(res => res.json())
              .catch(error => console.error('Error:', error))
              .then(response => console.log('DELETE Success:', response.cart));
            this.updateCart();
          },
          updateCart() {
            fetch('/cart/update', {
                credentials: 'include',
                method: 'get',
                headers: new Headers({
                  'Content-Type': 'application/json'
                })
              }).then(res => res.json())
              .catch(error => console.error('Error:', error))
              .then(
                function(response) {
                  vm.items = response.cart;
                  vm.totalProduits = response.total_produits;
                  vm.totalFdp = response.total_FraisDePorts;
                  vm.amount = response.amount;
                  vm.reduction = response.reduction;

                });
          },
          emptyCart() {
            fetch('/cart', {
              credentials: 'include',
              method: 'put'
            });

            this.updateCart();
          },
          showDetails(item) {
            vm.detailsItem.pop();
            vm.detailsItem.push(item);
            this.details = true;
            $('#details_contenu').html(item.nom + item.prix + item.frequence);
          }
        }
      });
    </script>

    <% include footer.ejs %>
      <script type="text/javascript" src="/js/shop.js"></script>
</body>

</html>
